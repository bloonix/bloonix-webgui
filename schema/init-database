#!/usr/bin/perl
use strict;
use warnings;
use POSIX qw(getuid);
use Term::ReadKey;

if (getuid() != 0) {
    print "Please execute this script as user root\n";
    exit 1;
}

my ($password, $config, $fh);
my $progname = do { $0 =~ m!([^/]+)\z!; $1 };
my $user = "bloonix";
my $opts = {
    stdin => 0,
    "drop-bloonix" => 0,
    postgres => 0,
    mysql => 0
};

while (@ARGV) {
    my $opt = shift @ARGV;
    $opt =~ s/^--//;
    if (!exists $opts->{$opt}) {
        $opts->{help} = 1;
    } else {
        $opts->{$opt} = 1;
    }
}

if ($opts->{help}) {
    print "\nUsage: $progname [ OPTIONS ]\n\n";
    print "Calling $progname without options will generate a password\n";
    print "and install the Bloonix database schema.\n\n";
    print "Options:\n\n";
    print "--stdin\n";
    print "    Enter the password over STDIN.\n";
    print "    By default a random password is generated.\n";
    print "--drop-bloonix\n";
    print "    The bloonix database and role will be dropped at first.\n";
    print "    Be careful with this option!\n";
    print "--postgres\n";
    print "  Use PostgreSQL as database system.\n";
    print "--mysql\n";
    print "  Use MySQL as database system.\n";
    print "--help\n";
    print "    Print the help and exit.\n\n";
    exit;
}

if (!$opts->{postgres} && !$opts->{mysql}) {
    print "Missing mandatory parameter --postgres or --mysql\n";
    exit;
}

if ($opts->{postgres} && $opts->{mysql}) {
    print "Mixing parameter --postgres and --mysql is not allowed\n";
    exit;
}

if ($opts->{stdin}) {
    print "\nEnter the password for user 'bloonix': ";
    $password = <stdin>;
} else {
    print "\nGenerate password for user 'bloonix'\n\n";
    $password = do {
        my @c = ("a".."z", "A".."Z", 0..9, qw(^ ! ยง $ % & = ? * + _ - ; . : [ ] @ ~ | < > /), ",", "#", "(", ")");
        my $s = "";
        $s .= $c[int(rand(scalar @c))] for (1..15);
        $s;
    };
}

my ($system_user, $driver, $port);

if ($opts->{mysql}) {
    $system_user = $driver = "mysql";
    $port = 3306;
} else {
    $system_user = "postgres";
    $driver = "Pg";
    $port = 5432;
}

my $sql_quoted_password = $password;
$sql_quoted_password =~ s!\\!\\\\!g;
$sql_quoted_password =~ s!'!\\'!g;

open $fh, ">", "/etc/bloonix/database/create-bloonix-user.sql" or die $!;
system("chmod 640 /etc/bloonix/database/create-bloonix-user.sql");
system("chgrp $system_user /etc/bloonix/database/create-bloonix-user.sql");

if ($opts->{"drop-bloonix"}) {
    print $fh "DROP DATABASE bloonix;\n";
    if ($opts->{postgres}) {
        print $fh "DROP ROLE bloonix;\n";
    }
}

if ($opts->{postgres}) {
    print $fh "CREATE ROLE $user WITH LOGIN PASSWORD '$sql_quoted_password';\n";
    print $fh "CREATE DATABASE $user OWNER $user;\n";
} else {
    print $fh "CREATE DATABASE $user;\n";
    print $fh "GRANT ALL PRIVILEGES ON $user.* to $user\@localhost IDENTIFIED BY '$sql_quoted_password';\n";
    print $fh "FLUSH PRIVILEGES;\n";
}

close $fh;

if ($opts->{postgres}) {
    print "\nCreate user 'bloonix'\n\n";
    system('su - postgres -c "psql -f /etc/bloonix/database/create-bloonix-user.sql"');
    unlink("/etc/bloonix/database/create-bloonix-user.sql");
    print "\nInstall bloonix schema\n\n";
    $ENV{PGPASSWORD} = $password;
    system("psql -U $user -h localhost -f /srv/bloonix/webgui/schema/schema-pg.sql");
    $ENV{PGPASSWORD} = "";
} else {
    print "Type the root password of the mysql: ";
    ReadMode("noecho");
    chomp(my $password = <STDIN>);
    ReadMode(0);
    print "\nCreate user 'bloonix'\n\n";
    $ENV{MYSQL_PWD} = $password;
    system("mysql -u root </etc/bloonix/database/create-bloonix-user.sql");
    die $? if $?;
    print "\nInstall bloonix schema\n\n";
    system("mysql -u root $user </srv/bloonix/webgui/schema/schema-mysql.sql");
    die $? if $?;
    $ENV{MYSQL_PWD} = "";
}

open $fh, "<", "/etc/bloonix/database/main.conf" or die $!;
$config = do { local $/; <$fh> };
close $fh;

$config =~ s/\@\@PASSWORD\@\@/$password/;
$config =~ s/\@\@DRIVER\@\@/$driver/;
$config =~ s/\@\@PORT\@\@/$port/;
open $fh, ">", "/etc/bloonix/database/main.conf" or die $!;
print $fh $config;
close $fh;

system("chmod 640 /etc/bloonix/database/main.conf");
system("chown root:bloonix /etc/bloonix/database/main.conf");

print "\ndone\n\n";
